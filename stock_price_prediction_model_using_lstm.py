# -*- coding: utf-8 -*-
"""Stock Price Prediction model using LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ejZKRHFtkMLI6DPu5xoLo82NekpimZ3i

✅ Step 1: Install Required Libraries
"""

!pip install yfinance --quiet
!pip install pandas matplotlib --quiet

"""✅ Step 2: Import Libraries


"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

"""✅ Step 3: Download Stock Data (e.g., Apple)"""

stock = 'AAPL'  # You can replace with TSLA, GOOGL, etc.
data = yf.download(stock, start='2015-01-01', end='2023-12-31')
data = data[['Close']]
data.head()

"""✅ Step 4: Normalize Data"""

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

training_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:training_size]
test_data = scaled_data[training_size:]

"""✅ Step 5: Prepare Data for LSTM"""

def create_dataset(dataset, time_step=60):
    X, Y = [], []
    for i in range(len(dataset) - time_step - 1):
        X.append(dataset[i:(i + time_step), 0])
        Y.append(dataset[i + time_step, 0])
    return np.array(X), np.array(Y)

time_step = 60
X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

"""✅ Step 6: Build and Train LSTM Model"""

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(60, 1)))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(X_train, y_train, epochs=10, batch_size=64, verbose=1)

"""✅ Step 7: Make Predictions and Plot"""

predicted = model.predict(X_test)
predicted = scaler.inverse_transform(predicted)
actual = scaler.inverse_transform(y_test.reshape(-1, 1))

# Plot
plt.figure(figsize=(12,6))
plt.plot(actual, label='Actual Price')
plt.plot(predicted, label='Predicted Price')
plt.legend()
plt.title(f'{stock} Stock Price Prediction')
plt.xlabel('Days')
plt.ylabel('Price')
plt.show()